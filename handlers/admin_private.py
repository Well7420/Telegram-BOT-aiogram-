from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from filters.chat_types import ChatTypeFilter, IsAdmin
from keyboards.reply import get_keyboard


AP_Router = Router()
AP_Router.message.filter(ChatTypeFilter(['private']), IsAdmin())


ADMIN_KB = get_keyboard(
    '–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä',
    '–ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ–≤–∞—Ä',
    '–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä',
    '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤',
    placeholder='–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é',
    sizes=(2, 1, 1),
)


@AP_Router.message(Command('admin'))
async def admin_features(message: types.Message):
    await message.answer('–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?üëÄ', reply_markup=ADMIN_KB)


@AP_Router.message(F.text == '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤')
async def starring_at_product(message: types.Message):
    await message.answer('–û–ö, –æ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤')


@AP_Router.message(F.text == '–ó–º—ñ–Ω–∏—Ç–∏ —Ç–æ–≤–∞—Ä')
async def change_product(message: types.Message):
    await message.answer('–Ø–∫–∏–π —Ç–æ–≤–∞—Ä –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?üòä')


@AP_Router.message(F.text == '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def delete_product(message: types.Message):
    await message.answer('–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ç–æ–≤–∞—Ä(–∏) –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è')


#–ö–æ–¥ –Ω–∏–∂—á–µ –¥–ª—è –º–∞—à–∏–Ω–∏ —Å—Ç–∞–Ω—É (FSM)

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    image = State()

    texts = {
        'AddProduct:name': '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ–≤—Ç–æ—Ä–Ω–æ:',
        'AddProduct:description': '–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ:',
        'AddProduct:price': '–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–Ω–æ–≤—É:',
        'AddProduct:image': '–¶–µ–π —Å—Ç–∞–Ω –æ—Å—Ç–∞–Ω–Ω—ñ–π, —Ç–æ–º—É...',
    }

#–°—Ç–∞—î–º–æ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è name
@AP_Router.message(StateFilter(None), F.text == '–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä')
async def add_product(message: types.Message, state: FSMContext):
    await message.answer(
        '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä–∞', reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddProduct.name)


#–•–µ–Ω–¥–ª–µ—Ä —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –º–∞—î –±—É—Ç–∏ —Ç—É—Ç –∑–∞–≤–∂–¥–∏,
#–ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ —Å—Ç–∞–ª–∏ –≤ —Å—Ç–∞–Ω –Ω–æ–º–µ—Ä 1 (–µ–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–µ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤)
@AP_Router.message(StateFilter('*'), Command('–æ—Ç–º–µ–Ω–∞'))
@AP_Router.message(StateFilter('*'), F.text.casefold() == '–æ—Ç–º–µ–Ω–∞')
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer('–£—Å—ñ –¥—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ', reply_markup=ADMIN_KB)

#–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –∫—Ä–æ–∫ –Ω–∞–∑–∞–¥ (–≤ –º–∏–Ω—É–ª–∏–π —Å—Ç–∞–Ω)
@AP_Router.message(StateFilter('*'), Command('–Ω–∞–∑–∞–¥'))
@AP_Router.message(StateFilter('*'), F.text.casefold() == '–Ω–∞–∑–∞–¥')
async def back_step_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()

    if current_state == AddProduct.name:
        await message.answer('–ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É –Ω–µ–º–∞—î, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "–°–∫–∞—Å—É–≤–∞—Ç–∏"')
        return

    previous = None
    for step in AddProduct.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'–û–∫, –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É \n 
                                 {AddProduct.texts[previous.state]}')
            return
        previous = step


#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ name –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ description
@AP_Router.message(AddProduct.name, F.text)
async def add_name(message: types.Message, state: FSMContext):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫—É—é –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    #–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –Ω–µ –º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    #–Ω–∞–ø—Ä–∏–º–µ—Ä:
    if len(message.text) >= 100:
        await message.answer('–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. \n –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤—Ç–æ—Ä–Ω–æ')
        return
    
    await state.update_data(name=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É')
    await state.set_state(AddProduct.description)

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è name
@AP_Router.message(AddProduct.name)
async def add_name2(message: types.Message, state: FSMContext):
    await message.answer('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É')



#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ description –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ price
@AP_Router.message(AddProduct.description, F.text)
async def add_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer('–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É')
    await state.set_state(AddProduct.price)

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è description
@AP_Router.message(AddProduct.description)
async def add_description2(message: types.Message, state: FSMContext):
    await message.answer('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É')



#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ price –∏ –ø–æ—Ç–æ–º –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ image
@AP_Router.message(AddProduct.price, F.text)
async def add_price(message: types.Message, state: FSMContext):
    try:
        float(message.text)
    except ValueError:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏')
        return
    
    await state.update_data(price=message.text)
    await message.answer('–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É')
    await state.set_state(AddProduct.image)

#–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è price
@AP_Router.message(AddProduct.price)
async def add_price2(message: types.Message, state: FSMContext):
    await message.answer('–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ –¥–∞–Ω—ñ, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∏ —Ç–æ–≤–∞—Ä—É')



#–õ–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ image –∏ –ø–æ—Ç–æ–º –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@AP_Router.message(AddProduct.image, F.photo)
async def add_image(message: types.Message, state: FSMContext):
    await state.update_data(image=message.photo[-1].file_id)
    await message.answer('–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ', reply_markup=ADMIN_KB)
    data = await state.get_data()
    await message.answer(str(data))
    await state.clear()

@AP_Router.message(AddProduct.image)
async def add_image2(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —ó–∂—ñ')